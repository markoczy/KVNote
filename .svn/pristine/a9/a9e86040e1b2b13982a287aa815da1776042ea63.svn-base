package mkz.kvnote.parser;

import java.util.ArrayList;

import mkz.kvnote.db.DbHandler;
import mkz.util.io.IO;
import mkz.util.jcli.Parser;
import mkz.util.jcli.definition.IExecutable;

public class KVParser extends Parser<ArrayList<String>>
{
	private static final DbHandler kv = new DbHandler();
	
	public static final class Status
	{
		public static final String OK_SET = "OK#INSERTED";
		public static final String NOK_GET = "OK#INSERTED";
		public static final String OK_DELETE = "OK#DELETED";
		public static final String NOK_BAD_ARGS_COUNT = "NOK#BAD_ARGUMENT_COUNT";
		public static final String NOK_INSERT = "OK#FAILED_INSERT";
		public static final String NOK_DELETE = "OK#FAILED_DELETE";
	} 
	
	private static final IExecutable<ArrayList<String>> SET = (arr)->
	{
		IO.dbOutD("Arr length = "+arr.length);
		if(arr.length==3)
		{
			if(kv.insertValue(arr[1], arr[2], false)) return getSingleMessage(Status.OK_SET);
			else return getSingleMessage(Status.NOK_INSERT);
		}
		else
		{
			return getSingleMessage(Status.NOK_BAD_ARGS_COUNT);
		}
	};
	

	private static final IExecutable<ArrayList<String>> GET = (arr)->
	{
		IO.dbOutD("Arr length = "+arr.length);
		if(arr.length==2)
		{
			String lVal = kv.retreiveValue(arr[1]);
			if(lVal!=null) return getSingleMessage(lVal);
			else return getSingleMessage(Status.NOK_INSERT);
		}
		else
		{
			return getSingleMessage(Status.NOK_BAD_ARGS_COUNT);
		}
	};
	
	private static final IExecutable<ArrayList<String>> EXISTS = (arr)->
	{
		IO.dbOutD("Arr length = "+arr.length);
		if(arr.length==3)
		{
			if(kv.insertValue(arr[1], arr[2], false)) return getSingleMessage(Status.OK_SET);
			else return getSingleMessage(Status.NOK_INSERT);
		}
		else
		{
			return getSingleMessage(Status.NOK_BAD_ARGS_COUNT);
		}
	};
	
	
	private static final IExecutable<ArrayList<String>> DELETE = (arr)->
	{
		IO.dbOutD("Arr length = "+arr.length);
		if(arr.length==3)
		{
			if(kv.insertValue(arr[1], arr[2], false)) return getSingleMessage(Status.OK_SET);
			else return getSingleMessage(Status.NOK_INSERT);
		}
		else
		{
			return getSingleMessage(Status.NOK_BAD_ARGS_COUNT);
		}
	};
	

	private static final IExecutable<ArrayList<String>> LIST_KEYS = (arr)->
	{
		IO.dbOutD("Arr length = "+arr.length);
		if(arr.length==3)
		{
			if(kv.insertValue(arr[1], arr[2], false)) return getSingleMessage(Status.OK_SET);
			else return getSingleMessage(Status.NOK_INSERT);
		}
		else
		{
			return getSingleMessage(Status.NOK_BAD_ARGS_COUNT);
		}
	};
	
	private static final IExecutable<ArrayList<String>> LIST_VALUES = (arr)->
	{
		IO.dbOutD("Arr length = "+arr.length);
		if(arr.length==3)
		{
			if(kv.insertValue(arr[1], arr[2], false)) return getSingleMessage(Status.OK_SET);
			else return getSingleMessage(Status.NOK_INSERT);
		}
		else
		{
			return getSingleMessage(Status.NOK_BAD_ARGS_COUNT);
		}
	};
	
	public KVParser(String aPath, String aTable)
	{
		kv.open(aPath,aTable);
		
//		super.addCommand("[lk|listkeys|list|list_keys]", aAction)
		super.addCommand("[s|set|insert]", INSERT);
	}
	
	
	private static ArrayList<String> getSingleMessage(String aValue)
	{
		ArrayList<String> rVal = new ArrayList<String>();
		rVal.add(aValue);
		return rVal;
	}
}
